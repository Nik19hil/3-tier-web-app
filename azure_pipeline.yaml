trigger:
  branches:
    include: ['none']
      

pool:
  name: 'Agent-1'
  demands:
    - agent.name -equals agent1
    - npm
    - node.js
    - kubectl
    - java

variables:
  DOCKER_REGISTRY: 'docknik19'
  IMAGE_TAG: $(Build.BuildId)
  K8S_NAMESPACE: 'web-app'

stages:
  - stage: CleanWorkspace
    jobs:
      - job: Clean
        steps:
          - checkout: none
          - script: |
              echo "Cleaning workspace"
              sudo rm -rf *
        displayName: 'Clean workspace'
    
  - stage: DetectChanges
    displayName: 'Detect Changed Services'
    jobs:
      - job: SetFlags
        displayName: 'Check for changes using git'
        steps:
         - checkout: self
           persistCredentials: true
           fetchDepth: 0
         - script: |
              echo "## Detecting frontend changes..."
              git diff --quiet HEAD^ HEAD --frontend/ 
              if [$? -ne 0]; then 
                echo "##vso[task.setvariable variable=CHANGED_FRONTEND]true"
              else
                echo "##vso[task.setvariable variable=CHANGED_FRONTEND]false"
              fi
            
              echo "## Detecting backend changes..."
              git diff --quiet HEAD^ HEAD --backend/ 
              if [$? -ne 0]; then 
                echo "##vso[task.setvariable variable=CHANGED_BACKEND]true"
              else
                echo "##vso[task.setvariable variable=CHANGED_BACKEND]false"
              fi
              
              echo "## Detecting database changes..."
              git diff --quiet HEAD^ HEAD --database/ 
              if [$? -ne 0]; then 
                echo "##vso[task.setvariable variable=CHANGED_DB]true"
              else
                echo "##vso[task.setvariable variable=CHANGED_DB]false"
              fi
              
           displayName: 'Set change detection flags'

# FRONTEND STAGE
  - stage: BuildAndDeployFrontend
    displayName: 'Build and Deploy Frontend'
    condition: eq(variables['CHANGED_FRONTEND'], 'true')
    jobs:
      - job: Frontend
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'MyDockerHub'
              repository: '$(DOCKER_REGISTRY)/webapp-frontend'
              command: 'buildAndPush'
              Dockerfile: 'Application-Code/frontend/Dockerfile'
              tags: $(IMAGE_TAG)
            displayName: 'Build and Push Frontend Image'

          - script: |
              sed -i "s|{{Imagetag}}|$(IMAGE_TAG)|g" Kubernetes-Manifests/frontend/deployment.yaml
            displayName: 'Update frontend manifest'

          - task: KubernetesManifest@1
            inputs:
              action: deploy
              kubernetesServiceConnection: 'AKSCluster'
              namespace: $(K8S_NAMESPACE)
              manifests: |
                Kubernetes-Manifests/frontend/deployment.yaml
            displayName: 'Deploy Frontend to AKS'

# BACKEND STAGE
  - stage: BuildAndDeployBackend
    displayName: 'Build and Deploy Backend'
    condition: eq(variables['CHANGED_BACKEND'], 'true')
    jobs:
      - job: Backend
        steps:
         - task: Docker@2
           inputs:
             containerRegistry: 'MyDockerHub'
             repository: '$(DOCKER_REGISTRY)/webapp-backend'
             command: 'buildAndPush'
             Dockerfile: 'Application-Code/backend/Dockerfile'
             tags: $(IMAGE_TAG)
           displayName: 'Build and Push Backend Image'

         - script: |
             sed -i "s|{{ImageTag}}|$(IMAGE_TAG)|g" Kubernetes-Manifests/backend/deployment.yaml
           displayName: 'Update backend manifest'

         - task: KubernetesManifest@1
           inputs:
              action: deploy
              kubernetesServiceConnection: 'AKSCluster'
              namespace: $(K8S_NAMESPACE)
              manifests: |
                Kubernetes-Manifests/backend/deployment.yaml
           displayName: 'Deploy Backend to AKS'

# DATABASE STAGE
  - stage: DeployDatabase
    displayName: 'Deploy Database Changes'
    condition: eq(variables['CHANGED_DB'], 'true')
    jobs:
      - job: Database
        steps:
          - script: |
              echo "Applying DB manifests..."
            displayName: 'Update Database Manifests'

          - task: KubernetesManifest@1
            inputs:
              action: deploy
              kubernetesServiceConnection: 'AKSCluster'
              namespace: $(K8S_NAMESPACE)
              manifests: |
                Kubernetes-Manifests/database/*
            displayName: 'Deploy DB to AKS'
