trigger:
  branches:
    include: ['none']

pool:
  name: 'Agent-1'
  demands:
    - agent.name -equals agent1
    - npm
    - node.js
    - kubectl
    
variables:
  dockerRegistryServiceConnection: 'MyDockerHub'
  dockerRegistrybackend: 'webapp-backend'
  dockerRegistryfrontend: 'webapp-frontend'
  imageFrontend: 'webapp-frontend'
  imageBackend: 'webapp-backend'

stages:
# 1. Dectect changes in Code Repo
- stage: DetectChanges
  jobs:
  - job: Detect
    steps:
    - checkout: self
    - script: |
        git fetch origin master
        CHANGED_FILES=$(git diff --name-only origin/master)

        echo "Changed files:"
        echo "$CHANGED_FILES"

        if echo "$CHANGED_FILES" | grep ^frontend/; then
          echo "##vso[task.setvariable variable=ChangedFrontend]true"
        fi
        if echo "$CHANGED_FILES" | grep ^backend/; then
          echo "##vso[task.setvariable variable=ChangedBackend]true"
        fi
      displayName: Detect changed services    

# 2. Install Dependencies & Test
- stage: BuildAndTest
  jobs:
  - job: InstallAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd Application-Code/frontend
        npm install
        npm run test
      displayName: 'Install & Test Frontend'

    - script: |
        cd Application-Code/backend
        npm install
        npm run test
      displayName: 'Install & Test Backend'



#- stage: File_Operations
#  displayName: 'File Operations'
# dependsOn: ['Maven_Package']
#  jobs:
#    - job: copy_files
#      steps:
#      - task: CopyFiles@2
#        inputs:
#         SourceFolder: 'Kubernetes-Manifests-file/'
#         Contents: '**'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)'
#         OverWrite: true
#      - script: "if [ -f $(Build.ArtifactStagingDirectory)/deploymentbackend.yaml ]; then sed -i 's/{{Image_Tag}}/$(Build.BuildId)/g' $(Build.ArtifactStagingDirectory)/deploymentbackend.yaml; else echo 'File not found!'; exit 1; fi"

# 3. Build & Push Docker Images
- stage: BuildAndPush
  dependsOn: DetectChanges
  jobs:
   - job: DockerBuildPush
     condition: eq(variables['ChangedFrontend'], 'true')
     steps:
     - task: Docker@2
       displayName: 'Build Frontend Docker Image'
       inputs:
        command: buildAndPush
        repository: $(imageFrontend)
        dockerfile: Application-Code/frontend/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
    
   - job: BuildBackend
     condition: eq(variables['ChangedBackend'], 'true')
     steps:
     - task: Docker@2
       displayName: 'Build Backend Docker Image'
       inputs:
        command: buildAndPush
        repository: $(imageBackend)
        dockerfile: Application-Code/backend/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
