trigger:
  branches:
    include: ['none']
      
pool:
  name: 'Agent-1'
  demands:
    - agent.name -equals agent1
    - npm
    - node.js
    - kubectl
    - java

variables:
  #JAVA_HOME: $(JAVA_HOME_11_X64)
  #NODE_JS_VERSION: '16.x'
  #SONAR_SCANNER_HOME: $(Agent.ToolsDirectory)/sonar-scanner
  #AWS_DEFAULT_REGION: 'us-east-1'
  dockerRegistryServiceConnection: 'MyDockerHub'
  githubServiceConnection: 'GitHub'
  GIT_REPO_NAME: '3-tier-web-app'
  GIT_USER_NAME: 'Nik19hil'
  DOCKER_USER_NAME: 'docknik19'
  DOCKER_REPO_NAME: 'webapp-backend'
  IMAGE_TAG: $(Build.BuildId)

stages:
  - stage: CleanWorkspace
    jobs:
      - job: Clean
        steps:
          - checkout: none
          - script: |
              echo "Cleaning workspace"
              sudo rm -rf *
            displayName: 'Clean workspace'

  - stage: CheckoutCode
    jobs:
      - job: Checkout
        steps:
          - checkout: self

#  - stage: SonarQubeAnalysis
#    jobs:
#      - job: Sonar
#        steps:
#          - task: SonarQubePrepare@5
#            inputs:
#              SonarQube: 'sonar-server'
#              scannerMode: 'CLI'
#              configMode: 'manual'
#              cliProjectKey: 'three-tier-backend'
#              cliProjectName: 'three-tier-backend'
#              extraProperties: |
#                sonar.sources=.

#          - script: |
#              $(SONAR_SCANNER_HOME)/bin/sonar-scanner
#            workingDirectory: 'Application-Code/backend'
#            displayName: 'Run Sonar Scanner'

#  - stage: QualityGate
#    jobs:
#      - job: Gate
#        steps:
#          - task: SonarQubeAnalyze@5
#            inputs:
#              SonarQube: 'sonar-server'
#              waitForQualityGate: true
#              failOnQualityGateFailure: false

#  - stage: DependencyCheck
#    jobs:
#      - job: OWASP
#        steps:
#          - task: dependency-check-build-task@6
#            inputs:
#              projectName: 'three-tier-backend'
#              scanPath: 'Application-Code/backend'
#              format: 'XML'
#              arguments: '--disableYarnAudit --disableNodeAudit'
#          - task: PublishBuildArtifacts@1
#            inputs:
#              pathToPublish: 'dependency-check-report.xml'
#              artifactName: 'owasp-report'

#  - stage: trivy_fs_scan
#    displayName: 'Trivy FS Scan'
#    jobs:
#      - job: trivy_fs_scan
#        steps:
#          - task: CmdLine@2
#            inputs:
#              script: 'trivy fs --format table -o trivy-fs-report.html .'

#  - stage: DockerBuild
#    jobs:
#      - job: Docker
#        steps:
#          - task: DockerInstaller@0
#          - task: Bash@3
#            inputs:
#              targetType: 'inline'
#              script: |
#                docker system prune -f
#                docker container prune -f
#                docker build -t $(DOCKER_USER_NAME)/$(DOCKER_REPO_NAME):$(Build.BuildId) .
#                workingDirectory: '$(System.DefaultWorkingDirectory)'

  - stage: DockerHubPush
    jobs:
      - job: PushToDockerHub
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'MyDockerHub'
              repository: 'docknik19/webapp-backend'
              command: 'buildAndPush'
              Dockerfile: 'Application-Code/backend/Dockerfile'
              tags: $(IMAGE_TAG)

#  - stage: TrivyImageScan
#    jobs:
#      - job: TrivyImage
#        steps:
#          - script: |
#              trivy image $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_DEFAULT_REGION).amazonaws.com/$(AWS_ECR_REPO_NAME):$(Build.BuildId) > trivyimage.txt

  - stage: DeployToKubernetes
    jobs:
      - job: DeployBackend
        steps:
          - script: |
              echo "Updating image tag in deployment file"
              cd Kubernetes-Manifests-file/Backend
              sed -i 's|{{Imagetag}}|$(IMAGE_TAG)|g' deployment-backend.yaml
            displayName: 'Update image tag in local YAML'
          - script: |
              echo "Applying deployment to Kubernetes cluster"
          - task: KubernetesManifest@1
            displayName: 'Deploy backend to Kubernetes'
            inputs:
                action: 'deploy'
                connectionType: 'kubernetesServiceConnection'
                kubernetesServiceConnection: 'AKSCluster'
                namespace: 'web-app'
                manifests: 'Kubernetes-Manifests-file/Backend/deployment-backend.yaml'
            # kubectl apply -f Kubernetes-Manifests-file/Backend/deployment-backend.yaml
            
